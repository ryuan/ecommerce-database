PROJECT PROPOSAL
---------------------------------

My project will be for a 2-sided ecommerce marketplace, meaning there will be open accounts
for both customers and 3rd-party sellers (and of course, the marketplace owner/admin account 
can always directly access and modify the database, allowing it to create products just like
how Amazon or Wayfair sell their own branded or directly sourced products for higher margins).

To keep the early version of the database simple, I am focusing only on implementing the core
entities and relationships. For each distinct primary key (product_id) for the Product entity, 
there will be associated weak entity Variant. Each variant represents potential size or color
variations of the otherwise same product (if there's just the main variant, set it to default).

Products can be added to collections, which can help organize the app so product types and other
pages can just populate with products in a given collection.

The Seller entity can create products to add to the marketplace. Sellers are also associated with
orders that include products that they created. The Customer entity has a relationship with the
Order entity for obvious reasons - each order belongs to the customer that placed it, which means
a one-to-many relationship.

The Order entity has many of the expected attributes, but notice that some of the attributes are
calculated based on the product values in the order as well as any applied discount. The entity
Discount is the only added flair I'm adding to make the database a bit broader/realistic.
Discounts can have types (percent, fixed dollar), minimum order value before discounts can be applied,
as well as an effective start and end date for the discount code.