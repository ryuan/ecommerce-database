DATABASE FINAL PROJECT PROPOSAL IDEAS
Author: Ruoda Yuan


1. Database for 3-Way Ecommerce Marketplace
In 2014, I launched an online modern furniture retailer Froy (https://froy.com).
I built the store on Shopify, which is a 2-way marketplace consisting of customers and the retailer (us).
Froy has 15 suppliers, none of whom can create their own wholesale account to manage product data,
update stock, and other basic operations. Existing wholesale account plugins are lacking
in features, cumbersome to use, or lack enforcement of standardizations (ex., product image format).

I would be interested in building a database for a 3-way marketplace that consists of accounts/entities
for primary retailer, 3rd-party sellers/suppliers, and end-customers. My present intuition is that
we may need to consider distinct entitities for businesses and individuals. That allows the retailer
and suppliers to support employee accounts, each of whom can even be customers of the store.
The marketplace will also contain the usual ecommerce entities - orders, products, and collections.

Products are hard and have many attributes - unique handle, name, price, SKU, type hierarchy, stock, 
variants (colors, sizes), collection, description, and reviews. Orders will have products, customer, 
fulfillment status (paid, shipped, delivered, refund requested, etc.). Collections are a set of products
filtered for some set of rules.


2. Database for Live Streaming App
As part of my iOS App Dev class' final project, we need to build a fully functioning app that can
publish to the Apple App Store. I'd love to build something modern (i.e., use the most recent features
on Swift/XCode announced at WWDC) that can integrate knolwedge from other classes such as Databases.
Although boomers claim to hate apps like TikTok, I believe they are a study in great consumer tech
and application development. I would love to build some live streaming app for educational purpose.
On the surface, the project is simple - imagine an app solely focused on building around 
Twitch's Just Chatting channel or TikTok/Instagram's live streaming feature, nothing more.

The main product/entity will be the different video streams, which can have attributes such as 
genre (chatting, study-along, OOTD, reactions/watch-together, etc.), time streamed, viewer count,
chat log (chatroom during stream), etc. Users will consist of standard social media attributes - 
username, profile description, inventory of past streams, followers, following, liked streams, 
subscriptions, and credits (platform currency that the user can gift to streamers during their streams).

I will have to revise the entity-relationship model in full as many of these attributes will likely
have to be carved out into distinct entitites. Other entities will likely be built off of the,
such as collections/pages for displaying all strams of a certain genre.


*** For grading, please do not consider last proposal if it hurts me... I am laying it out now 
for brainstorming purpose as I'm new to DBMS as a topic and still learning what is realistic and not.
However, if you have any ideas or feedback, I would appreciate any opinons/comments.***


3. Database for Beginner-Friendly Trading App
Similar to the objectives from proposal #2, this proposal intends to integrate iOS app dev concepts
with DBMS knowledge. I would likely on crypto trading/wallet app to focus on one asset (and one that
is still very much a wild west). Crypto is still an unknown to many people, and differences between
different cryptocurrencies is impossible for many to decipher (even reading a white paper is hard).

I'll focus the project on just building a basic crypto trading app with very small adjustments for
profile/description requirements for each crypto profile to provide simple, entry-level explanation
for what makes that particular currency unique.

TBD on the entity-relationship model. I'm taking the weekend to explore existing apps and id best approach.
Though my knowledge of crypto is least strong relative to the other 2 proposals, I suspect this
proposal might be just as if not more implementable from a database management standpoint.